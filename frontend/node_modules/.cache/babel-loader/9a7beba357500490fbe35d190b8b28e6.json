{"ast":null,"code":"var _jsxFileName = \"/Users/abhiram/Desktop/TaskConnect/frontend/src/components/WorkerJobsView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../index.css'; // Using index.css for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkerJobsView = () => {\n  _s();\n  // State variables\n  const [availableJobs, setAvailableJobs] = useState([]); // Jobs worker can apply to\n  const [appliedJobs, setAppliedJobs] = useState([]); // Applications with pending/rejected status\n  const [acceptedJobs, setAcceptedJobs] = useState([]); // Applications with accepted status\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('available'); // 'available', 'applied', 'accepted'\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    fetchJobsAndApplications();\n  }, []);\n  const fetchJobsAndApplications = async () => {\n    setLoading(true);\n    setError(null);\n    setMessage('');\n    const token = localStorage.getItem('token');\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n    if (!token) {\n      setError('No authentication token found. Please log in.');\n      setLoading(false);\n      return;\n    }\n    try {\n      // Fetch available jobs (jobs not applied to yet)\n      console.log('[WorkerJobsView] Fetching available jobs...');\n      const availableRes = await axios.get(`${apiUrl}/api/jobs/available`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('[WorkerJobsView] Available Jobs Response:', availableRes.data);\n      // The backend returns categorized jobs, flatten them for the state\n      const flattenedAvailableJobs = Object.values(availableRes.data).flat();\n      setAvailableJobs(flattenedAvailableJobs);\n\n      // Fetch all applications for this worker\n      console.log('[WorkerJobsView] Fetching worker applications...');\n      const applicationsRes = await axios.get(`${apiUrl}/api/jobs/applications`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('[WorkerJobsView] Applications Response:', applicationsRes.data);\n      if (Array.isArray(applicationsRes.data)) {\n        const allApps = applicationsRes.data;\n        // Filter applications based on status\n        setAcceptedJobs(allApps.filter(app => app.status === 'accepted'));\n        setAppliedJobs(allApps.filter(app => app.status === 'pending' || app.status === 'rejected'));\n      } else {\n        console.error('[WorkerJobsView] Applications API did not return an array:', applicationsRes.data);\n        setError('Received unexpected application data format from the server.');\n        setAppliedJobs([]);\n        setAcceptedJobs([]);\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('[WorkerJobsView] Error fetching data:', err);\n      const errorMsg = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Error fetching job data';\n      setError(errorMsg);\n      setMessage(errorMsg); // Show error message to user\n      // Clear state on error\n      setAvailableJobs([]);\n      setAppliedJobs([]);\n      setAcceptedJobs([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle applying for a job\n  const handleApply = async jobId => {\n    setMessage(`Applying for job ${jobId}...`);\n    const token = localStorage.getItem('token');\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n    if (!token) {\n      setMessage('No authentication token found. Please log in.');\n      return;\n    }\n    try {\n      console.log(`[WorkerJobsView] Applying for job with ID: ${jobId}`);\n      const response = await axios.post(`${apiUrl}/api/jobs/${jobId}/apply`, {},\n      // Empty request body\n      {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('[WorkerJobsView] Apply response:', response.data);\n      setMessage(response.data.message || 'Application submitted successfully!');\n\n      // --- Optimistic UI Update ---\n      // Find the job that was just applied for\n      const appliedJob = availableJobs.find(job => job._id === jobId);\n      if (appliedJob) {\n        // Remove from available jobs\n        setAvailableJobs(prev => prev.filter(job => job._id !== jobId));\n        // Add to applied jobs (as pending)\n        // Construct an application-like object for the applied list\n        const newApplication = {\n          _id: `temp_${jobId}`,\n          // Temporary ID, real one comes on next fetch\n          job: appliedJob,\n          status: 'pending',\n          appliedAt: new Date().toISOString() // Show immediately\n        };\n        setAppliedJobs(prev => [newApplication, ...prev]);\n      }\n      // Optionally switch tab to show the applied jobs\n      // setActiveTab('applied');\n\n      // Optional: Clear message after delay\n      setTimeout(() => setMessage(''), 3000);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('[WorkerJobsView] Error applying for job:', err);\n      const errorMsg = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Error applying for job';\n      setMessage(errorMsg);\n      // Optional: Clear message after delay\n      setTimeout(() => setMessage(''), 5000);\n    }\n  };\n\n  // Helper to render a list of jobs/applications\n  const renderJobList = (jobs, type) => {\n    if (!jobs || jobs.length === 0) {\n      let message = 'No jobs found.';\n      if (type === 'applied') message = 'You have not applied for any jobs yet.';\n      if (type === 'accepted') message = 'No accepted job offers yet.';\n      if (type === 'available') message = 'No available jobs matching your criteria, or you have applied to all.';\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-jobs\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 14\n      }, this);\n    }\n    return jobs.map(item => {\n      var _job$postedBy;\n      // 'item' can be a job (for available) or an application (for applied/accepted)\n      const job = type === 'available' ? item : item.job;\n      const applicationStatus = type !== 'available' ? item.status : null;\n      const appliedDate = type !== 'available' ? item.appliedAt : null;\n\n      // Basic check if job data exists\n      if (!job) {\n        console.warn('[WorkerJobsView] Skipping rendering item due to missing job data:', item);\n        return null; // Skip rendering if job data is missing\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"job-title\",\n          children: job.title || 'Untitled Job'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 37\n          }, this), \" \", job.description || 'No description']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 37\n          }, this), \" \", job.category || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 37\n          }, this), \" \", job.location || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Budget:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 37\n          }, this), \" $\", job.budget || '0']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), ((_job$postedBy = job.postedBy) === null || _job$postedBy === void 0 ? void 0 : _job$postedBy.name) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Posted By:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 60\n          }, this), \" \", job.postedBy.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 34\n        }, this), applicationStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `job-detail status-${applicationStatus}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), \" \", applicationStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 14\n        }, this), appliedDate && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-detail\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Applied On:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), \" \", new Date(appliedDate).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 14\n        }, this), type === 'available' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"apply-btn\",\n          onClick: () => handleApply(job._id),\n          children: \"Apply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, type === 'available' ? job._id : item._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // --- Render Logic ---\n  if (error && !loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"jobs-list-title\",\n        children: \"Worker Job Portal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message error\",\n        children: [\"Failed to load data: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobs-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"jobs-list-title\",\n      children: \"Worker Job Portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"role-tabs\",\n      style: {\n        marginBottom: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'available' ? 'active' : ''}`,\n        onClick: () => setActiveTab('available'),\n        children: [\"Available (\", availableJobs.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'applied' ? 'active' : ''}`,\n        onClick: () => setActiveTab('applied'),\n        children: [\"Applied (\", appliedJobs.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'accepted' ? 'active' : ''}`,\n        onClick: () => setActiveTab('accepted'),\n        children: [\"Accepted (\", acceptedJobs.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `message ${message.includes('Error') ? 'error' : 'success'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 19\n    }, this), !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-list\",\n      children: [activeTab === 'available' && renderJobList(availableJobs, 'available'), activeTab === 'applied' && renderJobList(appliedJobs, 'applied'), activeTab === 'accepted' && renderJobList(acceptedJobs, 'accepted')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkerJobsView, \"FDah8ks8AaGkqotMEbTtMpmcKWU=\");\n_c = WorkerJobsView;\nexport default WorkerJobsView; // Make sure export name matches filename if needed elsewhere\nvar _c;\n$RefreshReg$(_c, \"WorkerJobsView\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","WorkerJobsView","_s","availableJobs","setAvailableJobs","appliedJobs","setAppliedJobs","acceptedJobs","setAcceptedJobs","message","setMessage","loading","setLoading","error","setError","activeTab","setActiveTab","fetchJobsAndApplications","token","localStorage","getItem","apiUrl","process","env","REACT_APP_API_URL","console","log","availableRes","get","headers","Authorization","data","flattenedAvailableJobs","Object","values","flat","applicationsRes","Array","isArray","allApps","filter","app","status","err","_err$response","_err$response$data","errorMsg","response","handleApply","jobId","post","appliedJob","find","job","_id","prev","newApplication","appliedAt","Date","toISOString","setTimeout","_err$response2","_err$response2$data","renderJobList","jobs","type","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_job$postedBy","applicationStatus","appliedDate","warn","title","description","category","location","budget","postedBy","name","toLocaleDateString","onClick","style","marginBottom","includes","_c","$RefreshReg$"],"sources":["/Users/abhiram/Desktop/TaskConnect/frontend/src/components/WorkerJobsView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../index.css'; // Using index.css for styling\n\nconst WorkerJobsView = () => {\n  // State variables\n  const [availableJobs, setAvailableJobs] = useState([]); // Jobs worker can apply to\n  const [appliedJobs, setAppliedJobs] = useState([]);   // Applications with pending/rejected status\n  const [acceptedJobs, setAcceptedJobs] = useState([]); // Applications with accepted status\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('available'); // 'available', 'applied', 'accepted'\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    fetchJobsAndApplications();\n  }, []);\n\n  const fetchJobsAndApplications = async () => {\n    setLoading(true);\n    setError(null);\n    setMessage('');\n    const token = localStorage.getItem('token');\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n    if (!token) {\n      setError('No authentication token found. Please log in.');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Fetch available jobs (jobs not applied to yet)\n      console.log('[WorkerJobsView] Fetching available jobs...');\n      const availableRes = await axios.get(`${apiUrl}/api/jobs/available`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      console.log('[WorkerJobsView] Available Jobs Response:', availableRes.data);\n      // The backend returns categorized jobs, flatten them for the state\n      const flattenedAvailableJobs = Object.values(availableRes.data).flat();\n      setAvailableJobs(flattenedAvailableJobs);\n\n      // Fetch all applications for this worker\n      console.log('[WorkerJobsView] Fetching worker applications...');\n      const applicationsRes = await axios.get(`${apiUrl}/api/jobs/applications`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      console.log('[WorkerJobsView] Applications Response:', applicationsRes.data);\n\n      if (Array.isArray(applicationsRes.data)) {\n        const allApps = applicationsRes.data;\n        // Filter applications based on status\n        setAcceptedJobs(allApps.filter(app => app.status === 'accepted'));\n        setAppliedJobs(allApps.filter(app => app.status === 'pending' || app.status === 'rejected'));\n      } else {\n         console.error('[WorkerJobsView] Applications API did not return an array:', applicationsRes.data);\n         setError('Received unexpected application data format from the server.');\n         setAppliedJobs([]);\n         setAcceptedJobs([]);\n      }\n\n    } catch (err) {\n      console.error('[WorkerJobsView] Error fetching data:', err);\n      const errorMsg = err.response?.data?.message || err.message || 'Error fetching job data';\n      setError(errorMsg);\n      setMessage(errorMsg); // Show error message to user\n      // Clear state on error\n      setAvailableJobs([]);\n      setAppliedJobs([]);\n      setAcceptedJobs([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle applying for a job\n  const handleApply = async (jobId) => {\n    setMessage(`Applying for job ${jobId}...`);\n    const token = localStorage.getItem('token');\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n    if (!token) {\n      setMessage('No authentication token found. Please log in.');\n      return;\n    }\n\n    try {\n      console.log(`[WorkerJobsView] Applying for job with ID: ${jobId}`);\n      const response = await axios.post(\n        `${apiUrl}/api/jobs/${jobId}/apply`,\n        {}, // Empty request body\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      console.log('[WorkerJobsView] Apply response:', response.data);\n      setMessage(response.data.message || 'Application submitted successfully!');\n\n      // --- Optimistic UI Update ---\n      // Find the job that was just applied for\n      const appliedJob = availableJobs.find(job => job._id === jobId);\n      if (appliedJob) {\n        // Remove from available jobs\n        setAvailableJobs(prev => prev.filter(job => job._id !== jobId));\n        // Add to applied jobs (as pending)\n        // Construct an application-like object for the applied list\n        const newApplication = {\n            _id: `temp_${jobId}`, // Temporary ID, real one comes on next fetch\n            job: appliedJob,\n            status: 'pending',\n            appliedAt: new Date().toISOString() // Show immediately\n        };\n        setAppliedJobs(prev => [newApplication, ...prev]);\n      }\n      // Optionally switch tab to show the applied jobs\n      // setActiveTab('applied');\n\n      // Optional: Clear message after delay\n       setTimeout(() => setMessage(''), 3000);\n\n    } catch (err) {\n      console.error('[WorkerJobsView] Error applying for job:', err);\n      const errorMsg = err.response?.data?.message || 'Error applying for job';\n      setMessage(errorMsg);\n       // Optional: Clear message after delay\n       setTimeout(() => setMessage(''), 5000);\n    }\n  };\n\n  // Helper to render a list of jobs/applications\n  const renderJobList = (jobs, type) => {\n    if (!jobs || jobs.length === 0) {\n      let message = 'No jobs found.';\n      if (type === 'applied') message = 'You have not applied for any jobs yet.';\n      if (type === 'accepted') message = 'No accepted job offers yet.';\n      if (type === 'available') message = 'No available jobs matching your criteria, or you have applied to all.';\n      return <p className=\"no-jobs\">{message}</p>;\n    }\n\n    return jobs.map((item) => {\n      // 'item' can be a job (for available) or an application (for applied/accepted)\n      const job = type === 'available' ? item : item.job;\n      const applicationStatus = type !== 'available' ? item.status : null;\n      const appliedDate = type !== 'available' ? item.appliedAt : null;\n\n      // Basic check if job data exists\n      if (!job) {\n          console.warn('[WorkerJobsView] Skipping rendering item due to missing job data:', item);\n          return null; // Skip rendering if job data is missing\n      }\n\n      return (\n        <div key={type === 'available' ? job._id : item._id} className=\"job-card\">\n          <h3 className=\"job-title\">{job.title || 'Untitled Job'}</h3>\n          <p className=\"job-detail\"><strong>Description:</strong> {job.description || 'No description'}</p>\n          <p className=\"job-detail\"><strong>Category:</strong> {job.category || 'N/A'}</p>\n          <p className=\"job-detail\"><strong>Location:</strong> {job.location || 'N/A'}</p>\n          <p className=\"job-detail\"><strong>Budget:</strong> ${job.budget || '0'}</p>\n          {/* Display Posted By if available */}\n          {job.postedBy?.name && <p className=\"job-detail\"><strong>Posted By:</strong> {job.postedBy.name}</p>}\n\n          {/* Display Application Status and Date if applicable */}\n          {applicationStatus && (\n             <p className={`job-detail status-${applicationStatus}`}>\n                <strong>Status:</strong> {applicationStatus}\n             </p>\n          )}\n           {appliedDate && (\n             <p className=\"job-detail\">\n                <strong>Applied On:</strong> {new Date(appliedDate).toLocaleDateString()}\n             </p>\n          )}\n\n          {/* Show Apply button only for available jobs */}\n          {type === 'available' && (\n            <button className=\"apply-btn\" onClick={() => handleApply(job._id)}>\n              Apply\n            </button>\n          )}\n        </div>\n      );\n    });\n  };\n\n  // --- Render Logic ---\n  if (error && !loading) {\n    return (\n      <div className=\"jobs-list-container\">\n        <h2 className=\"jobs-list-title\">Worker Job Portal</h2>\n        <p className=\"message error\">Failed to load data: {error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"jobs-list-container\">\n      <h2 className=\"jobs-list-title\">Worker Job Portal</h2>\n\n      {/* Tab Navigation */}\n      <div className=\"role-tabs\" style={{ marginBottom: '2rem' }}>\n        <button\n          className={`tab ${activeTab === 'available' ? 'active' : ''}`}\n          onClick={() => setActiveTab('available')}\n        >\n          Available ({availableJobs.length})\n        </button>\n        <button\n          className={`tab ${activeTab === 'applied' ? 'active' : ''}`}\n          onClick={() => setActiveTab('applied')}\n        >\n          Applied ({appliedJobs.length})\n        </button>\n        <button\n          className={`tab ${activeTab === 'accepted' ? 'active' : ''}`}\n          onClick={() => setActiveTab('accepted')}\n        >\n          Accepted ({acceptedJobs.length})\n        </button>\n      </div>\n\n      {/* Message Area */}\n      {message && (\n        <p className={`message ${message.includes('Error') ? 'error' : 'success'}`}>\n          {message}\n        </p>\n      )}\n\n      {/* Loading Indicator */}\n      {loading && <p className=\"loading\">Loading...</p>}\n\n      {/* Job Lists based on Active Tab */}\n      {!loading && (\n        <div className=\"jobs-list\">\n          {activeTab === 'available' && renderJobList(availableJobs, 'available')}\n          {activeTab === 'applied' && renderJobList(appliedJobs, 'applied')}\n          {activeTab === 'accepted' && renderJobList(acceptedJobs, 'accepted')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WorkerJobsView; // Make sure export name matches filename if needed elsewhere\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}